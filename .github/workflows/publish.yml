name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install --upgrade setuptools wheel twine

      - name: Get release version
        id: get_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set package version
        run: |
          echo "PACKAGE_VERSION=${{ steps.get_version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV

      - name: Verify setup.py version
        run: |
          SETUP_VERSION=$(PACKAGE_VERSION=${{ steps.get_version.outputs.RELEASE_VERSION }} python setup.py --version)
          echo "Version from setup.py: $SETUP_VERSION"
          echo "GitHub release version: ${{ steps.get_version.outputs.RELEASE_VERSION }}"
          if [ "$SETUP_VERSION" != "${{ steps.get_version.outputs.RELEASE_VERSION }}" ]; then
            echo "Version mismatch! setup.py version does not match GitHub release version."
            exit 1
          fi

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Verify package version
        run: |
          WHEEL_FILENAME=$(ls dist/*.whl)
          WHEEL_VERSION=$(echo $WHEEL_FILENAME | sed -n 's/.*-\(.*\)-py3.*/\1/p')
          echo "Wheel filename: $WHEEL_FILENAME"
          echo "Extracted version: $WHEEL_VERSION"
          if [ "$WHEEL_VERSION" != "${{ steps.get_version.outputs.RELEASE_VERSION }}" ]; then
            echo "Version mismatch! Wheel version does not match GitHub release version."
            exit 1
          fi

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
